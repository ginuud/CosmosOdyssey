// <auto-generated />
using System;
using System.Collections.Generic;
using CosmosOdyssey.REST.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace REST.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250613140302_AddReservedRouteTables")]
    partial class AddReservedRouteTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Leg", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PriceListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("RouteInfoId");

                    b.ToTable("Legs", (string)null);
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Planet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Planets", (string)null);
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.PriceList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ValidUntil")
                        .HasPrecision(7)
                        .HasColumnType("timestamp(7) with time zone");

                    b.HasKey("Id");

                    b.ToTable("PriceLists", (string)null);
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FlightEnd")
                        .HasPrecision(7)
                        .HasColumnType("timestamp(7) with time zone");

                    b.Property<DateTime>("FlightStart")
                        .HasPrecision(7)
                        .HasColumnType("timestamp(7) with time zone");

                    b.Property<Guid>("LegId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LegId");

                    b.ToTable("Providers", (string)null);
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("ReservedRouteId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalQuotedPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalQuotedTravelTime")
                        .HasColumnType("numeric");

                    b.PrimitiveCollection<List<string>>("TransportationCompanyNames")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ReservedRouteId");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.RouteInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("Distance")
                        .HasColumnType("bigint");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("RouteInfos", (string)null);
                });

            modelBuilder.Entity("REST.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("REST.Models.ReservedRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("ReservedRoutes", (string)null);
                });

            modelBuilder.Entity("REST.Models.RouteSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ReservedRouteId")
                        .HasColumnType("integer");

                    b.Property<Guid>("RouteInfoId")
                        .HasColumnType("uuid");

                    b.Property<int>("SegmentOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReservedRouteId");

                    b.HasIndex("RouteInfoId");

                    b.ToTable("RouteSegment");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Leg", b =>
                {
                    b.HasOne("CosmosOdyssey.REST.Models.PriceList", "PriceList")
                        .WithMany("Legs")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosmosOdyssey.REST.Models.RouteInfo", "RouteInfo")
                        .WithMany()
                        .HasForeignKey("RouteInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceList");

                    b.Navigation("RouteInfo");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Provider", b =>
                {
                    b.HasOne("CosmosOdyssey.REST.Models.Company", "Company")
                        .WithMany("Providers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosmosOdyssey.REST.Models.Leg", "Leg")
                        .WithMany("Providers")
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Leg");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Reservation", b =>
                {
                    b.HasOne("REST.Models.ReservedRoute", "ReservedRoute")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservedRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReservedRoute");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.RouteInfo", b =>
                {
                    b.HasOne("CosmosOdyssey.REST.Models.Planet", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CosmosOdyssey.REST.Models.Planet", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("REST.Models.RouteSegment", b =>
                {
                    b.HasOne("REST.Models.ReservedRoute", "ReservedRoute")
                        .WithMany("RouteSegments")
                        .HasForeignKey("ReservedRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosmosOdyssey.REST.Models.RouteInfo", "RouteInfo")
                        .WithMany()
                        .HasForeignKey("RouteInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReservedRoute");

                    b.Navigation("RouteInfo");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Company", b =>
                {
                    b.Navigation("Providers");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Leg", b =>
                {
                    b.Navigation("Providers");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.PriceList", b =>
                {
                    b.Navigation("Legs");
                });

            modelBuilder.Entity("REST.Models.ReservedRoute", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("RouteSegments");
                });
#pragma warning restore 612, 618
        }
    }
}
