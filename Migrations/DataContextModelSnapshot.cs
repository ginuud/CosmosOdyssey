// <auto-generated />
using System;
using CosmosOdyssey.REST.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CosmosOdyssey.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Leg", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("PricelistId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouteInfoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PricelistId");

                    b.HasIndex("RouteInfoId");

                    b.ToTable("Legs");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Planet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Planet");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Pricelist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Pricelists");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Provider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FlightEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FlightStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LegId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LegId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.RouteInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<long>("Distance")
                        .HasColumnType("bigint");

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("RouteInfos");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Leg", b =>
                {
                    b.HasOne("CosmosOdyssey.REST.Models.Pricelist", "Pricelist")
                        .WithMany("Legs")
                        .HasForeignKey("PricelistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CosmosOdyssey.REST.Models.RouteInfo", "RouteInfo")
                        .WithMany()
                        .HasForeignKey("RouteInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pricelist");

                    b.Navigation("RouteInfo");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Provider", b =>
                {
                    b.HasOne("CosmosOdyssey.REST.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CosmosOdyssey.REST.Models.Leg", "Leg")
                        .WithMany("Providers")
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Leg");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.RouteInfo", b =>
                {
                    b.HasOne("CosmosOdyssey.REST.Models.Planet", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CosmosOdyssey.REST.Models.Planet", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Leg", b =>
                {
                    b.Navigation("Providers");
                });

            modelBuilder.Entity("CosmosOdyssey.REST.Models.Pricelist", b =>
                {
                    b.Navigation("Legs");
                });
#pragma warning restore 612, 618
        }
    }
}
